name: 混淆并创建 GitHub 发行版

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 */8 * * *'  # 每隔8小时运行一次

jobs:
  obfuscate-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: 检查上游仓库更新并同步 _worker.js.backup
        id: check-update
        run: |
          set -euo pipefail
          WORKER_URL="https://raw.githubusercontent.com/cmliu/epeius/main/_worker.js"
          TOML_URL="https://raw.githubusercontent.com/cmliu/epeius/main/wrangler.toml"
          WORKER_FILE="_worker.js"
          BACKUP_FILE="_worker.js.backup"
          TOML_FILE="wrangler.toml"
          WORKER_HASH_FILE=".worker_hash"
          TOML_HASH_FILE=".toml_hash"
          
          # 下载上游文件到临时文件
          curl -s -L -o temp_worker.js "$WORKER_URL"
          curl -s -L -o temp_toml.toml "$TOML_URL"
          
          # 检查文件是否下载成功
          if [ ! -f temp_worker.js ] || [ ! -s temp_worker.js ]; then
            echo "Error: Failed to download or empty file for temp_worker.js"
            exit 1
          fi
          if [ ! -f temp_toml.toml ] || [ ! -s temp_toml.toml ]; then
            echo "Error: Failed to download or empty file for temp_toml.toml"
            exit 1
          fi
          
          # 计算新文件的哈希值
          NEW_WORKER_HASH=$(sha256sum temp_worker.js | awk '{print $1}')
          NEW_TOML_HASH=$(sha256sum temp_toml.toml | awk '{print $1}')
          
          # 检查旧哈希值（如果存在）
          OLD_WORKER_HASH=""
          OLD_TOML_HASH=""
          if [ -f "$WORKER_HASH_FILE" ]; then
            OLD_WORKER_HASH=$(cat "$WORKER_HASH_FILE")
          fi
          if [ -f "$TOML_HASH_FILE" ]; then
            OLD_TOML_HASH=$(cat "$TOML_HASH_FILE")
          fi
          
          # 检查 _worker.js.backup 是否存在，若不存在则创建
          if [ ! -f "$BACKUP_FILE" ]; then
            echo "Creating initial $BACKUP_FILE from upstream _worker.js"
            mv temp_worker.js "$BACKUP_FILE"
            echo "$NEW_WORKER_HASH" > "$WORKER_HASH_FILE"
            echo "has_update=true" >> $GITHUB_OUTPUT
          else
            # 仅在 _worker.js 有更新时覆盖 _worker.js.backup
            if [ "$NEW_WORKER_HASH" != "$OLD_WORKER_HASH" ]; then
              echo "Upstream _worker.js updated, overwriting $BACKUP_FILE"
              mv temp_worker.js "$BACKUP_FILE"
              echo "$NEW_WORKER_HASH" > "$WORKER_HASH_FILE"
              echo "has_update=true" >> $GITHUB_OUTPUT
            else
              echo "No update for _worker.js, keeping existing $BACKUP_FILE"
              rm -f temp_worker.js
            fi
          fi
          
          # 检查是否需要更新 wrangler.toml
          if [ ! -f "$TOML_FILE" ] || [ "$NEW_TOML_HASH" != "$OLD_TOML_HASH" ]; then
            echo "Upstream wrangler.toml updated or not present, overwriting $TOML_FILE"
            mv temp_toml.toml "$TOML_FILE"
            echo "$NEW_TOML_HASH" > "$TOML_HASH_FILE"
            echo "has_update=true" >> $GITHUB_OUTPUT
          else
            echo "No update for wrangler.toml, keeping existing $TOML_FILE"
            rm -f temp_toml.toml
          fi
          
          # 如果 _worker.js 不存在，创建初始版本
          if [ ! -f "$WORKER_FILE" ] && [ -f "$BACKUP_FILE" ]; then
            echo "Creating initial $WORKER_FILE from $BACKUP_FILE"
            cp "$BACKUP_FILE" "$WORKER_FILE"
            echo "has_update=true" >> $GITHUB_OUTPUT
          fi
          
          # 如果 has_update 未设置，设为 false
          if [ -z "${{ steps.check-update.outputs.has_update }}" ]; then
            echo "has_update=false" >> $GITHUB_OUTPUT
          fi

      - name: 验证和修复 wrangler.toml
        if: steps.check-update.outputs.has_update == 'true'
        run: |
          set -euo pipefail
          TOML_FILE="wrangler.toml"
          OUTPUT_DIR="dist"
          
          # 检查 wrangler.toml 是否存在
          if [ ! -f "$TOML_FILE" ]; then
            echo "Error: $TOML_FILE does not exist"
            exit 1
          fi
          
          # 创建临时文件以重建 wrangler.toml
          TEMP_TOML="temp_wrangler.toml"
          touch "$TEMP_TOML"
          
          # 读取现有 wrangler.toml 内容并逐行处理，确保有效属性
          grep -vE '^\s*($|#.*$)' "$TOML_FILE" | while IFS= read -r line; do
            # 跳过无效或重复的 pages_build_output_dir
            if [[ "$line" =~ ^pages_build_output_dir\s*= ]]; then
              continue
            fi
            # 写入有效行
            echo "$line" >> "$TEMP_TOML"
          done
          
          # 确保每行以换行符结尾
          echo "" >> "$TEMP_TOML"
          
          # 添加或更新 pages_build_output_dir
          if ! grep -q '^pages_build_output_dir\s*=' "$TOML_FILE"; then
            echo 'pages_build_output_dir = "dist"' >> "$TEMP_TOML"
          else
            # 如果存在，保留原始值
            grep '^pages_build_output_dir\s*=' "$TOML_FILE" >> "$TEMP_TOML"
          fi

          # 替换原始 wrangler.toml
          mv "$TEMP_TOML" "$TOML_FILE"
          
          # 创建输出目录
          mkdir -p "$OUTPUT_DIR"
          echo "Created output directory $OUTPUT_DIR"
          
          # 验证 wrangler.toml 的基本语法
          if ! grep -qE '^[[:space:]]*\w+\s*=\s*' "$TOML_FILE"; then
            echo "Error: $TOML_FILE appears to be invalid or empty"
            exit 1
          fi
          
          echo "$TOML_FILE validated and updated successfully"
          cat "$TOML_FILE"
          
      - name: Set up Node.js
        if: steps.check-update.outputs.has_update == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Install dependencies
        if: steps.check-update.outputs.has_update == 'true'
        run: |
          npm install
          sudo apt-get update
          sudo apt-get install -y jq zip
          
      - name: Install Source Dependencies
        if: steps.check-update.outputs.has_update == 'true'
        working-directory: ${{ env.SOURCE_DIR }}
        run: |
          set -euo pipefail
          if [ -f package-lock.json ] || [ -f package.json ]; then
            echo "Installing dependencies with npm ci..."
            npm ci --prefer-offline --no-audit --progress=false || {
              echo "npm ci failed, falling back to npm install..."
              npm install
            }
          else
            echo "No package.json in source directory, skipping dependency installation."
          fi
          
      - name: Install Repository Dependencies
        if: steps.check-update.outputs.has_update == 'true'
        working-directory: ${{ github.workspace }}
        run: |
          set -euo pipefail
          if [ -f package-lock.json ] || [ -f package.json ]; then
            echo "Installing dependencies with npm ci..."
            npm ci --prefer-offline --no-audit --progress=false || {
              echo "npm ci failed, falling back to npm install..."
              npm install
            }
          else
            echo "No package.json in repository, skipping dependency installation."
          fi
          
      - name: 检查备份文件并创建 _worker_temp.js
        if: steps.check-update.outputs.has_update == 'true'
        run: |
          set -euo pipefail
          WORKER_FILE="_worker.js"
          BACKUP_FILE="_worker.js.backup"
          TEMP_FILE="_worker_temp.js"
          
          # 确保 _worker.js.backup 存在
          if [ ! -f "$BACKUP_FILE" ]; then
            echo "Error: $BACKUP_FILE does not exist in $(pwd)"
            exit 1
          fi
          
          # 创建 _worker_temp.js 从 _worker.js.backup
          cp "$BACKUP_FILE" "$TEMP_FILE" || {
            echo "Error: Failed to create $TEMP_FILE from $BACKUP_FILE"
            exit 1
          }
          
          if [ ! -f "$TEMP_FILE" ]; then
            echo "Error: $TEMP_FILE not found in $(pwd)"
            exit 1
          fi
          
          echo "$TEMP_FILE created successfully from $BACKUP_FILE at $(pwd)/$TEMP_FILE"
          ls -la
          
      - name: 混淆代码
        if: steps.check-update.outputs.has_update == 'true'
        run: |
          set -euo pipefail
          echo "Current directory before build: $(pwd)"
          echo "Files in current directory:"
          ls -la
          npm run build -- --input _worker_temp.js --output _worker.js
          if [ ! -f "_worker.js" ]; then
            echo "Error: _worker.js not created after obfuscation"
            exit 1
          fi
          echo "_worker.js created successfully at $(pwd)/_worker.js"
          
      - name: 压缩 _worker.js 为 worker.zip
        if: steps.check-update.outputs.has_update == 'true'
        run: |
          set -euo pipefail
          zip worker.zip _worker.js
          if [ ! -f "worker.zip" ]; then
            echo "Error: worker.zip not created"
            exit 1
          fi
          echo "worker.zip created successfully at $(pwd)/worker.zip"
          ls -la
          
      - name: 提交更改
        if: steps.check-update.outputs.has_update == 'true'
        run: |
          set -euo pipefail
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add _worker.js _worker.js.backup wrangler.toml .worker_hash .toml_hash
          if git diff --cached --quiet; then
            echo "没有文件更改，跳过提交"
          else
            git commit -m "混淆 _worker.js 文件、同步备份和 wrangler.toml（从 cmliu/epeius），版本: ${{ steps.extract-version.outputs.version }}"
          fi
          
      - name: 推送更改
        if: steps.check-update.outputs.has_update == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}

      - name: 提取版本号
        if: steps.check-update.outputs.has_update == 'true'
        id: extract-version
        run: |
          set -euo pipefail
          if [ ! -f "wrangler.toml" ]; then
            echo "Error: wrangler.toml does not exist in $(pwd)"
            exit 1
          fi
          VERSION=$(grep '^name\s*=\s*"' wrangler.toml | awk -F'"' '{print $2}')
          if [ -z "$VERSION" ]; then
            echo "Error: Could not extract version from wrangler.toml"
            exit 1
          fi
          echo "Extracted version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: 检查已发布版本
        if: steps.check-update.outputs.has_update == 'true'
        id: check-version
        run: |
          set -euo pipefail
          VERSION="${{ steps.extract-version.outputs.version }}"
          echo "Checking if release $VERSION exists..."
          if curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$VERSION" | jq -e '.id' >/dev/null; then
            echo "Release $VERSION already exists, skipping release creation."
            echo "skip_release=true" >> $GITHUB_OUTPUT
          else
            echo "Release $VERSION does not exist, proceeding with release creation."
            echo "skip_release=false" >> $GITHUB_OUTPUT
          fi
          
      - name: 创建 GitHub 发行版
        if: steps.check-update.outputs.has_update == 'true' && steps.check-version.outputs.skip_release != 'true'
        run: |
          set -euo pipefail
          VERSION="${{ steps.extract-version.outputs.version }}"
          echo "Creating GitHub Release for version $VERSION..."
          RELEASE_RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases" \
            -d "{\"tag_name\":\"$VERSION\",\"name\":\"$VERSION\",\"body\":\"Release for version $VERSION\",\"draft\":false,\"prerelease\":false}")
          RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id')
          if [ -z "$RELEASE_ID" ] || [ "$RELEASE_ID" = "null" ]; then
            echo "Error: Failed to create release for $VERSION"
            exit 1
          fi
          echo "Release created with ID: $RELEASE_ID"
          # 上传 worker.zip
          curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -H "Content-Type: application/zip" \
            --data-binary "@worker.zip" \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=worker.zip"
          # 上传 _worker.js.backup
          curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -H "Content-Type: application/javascript" \
            --data-binary "@_worker.js.backup" \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=_worker.js.backup"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
